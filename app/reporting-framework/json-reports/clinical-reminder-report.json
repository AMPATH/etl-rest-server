{
  "name": "clinical_reminder_report",
  "version": "1.0",
  "tag": "clinical_reminder_report",
  "description": "Clinical Reminder Report",
  "uses": [
    {
      "name": "flatLabsAndImagingDataSetbase",
      "version": "1.0",
      "type": "dataset_def"
    }
  ],
  "sources": [
    {
      "table": "etl.flat_hiv_summary_v15b",
      "alias": "t1"
    },
    {
      "table": "(SELECT fli.person_id, fli.hiv_viral_load as vl_1, fli.test_datetime as vl_1_date FROM etl.flat_labs_and_imaging fli INNER JOIN (SELECT person_id, MAX(test_datetime) AS max_vl_1_date,max(encounter_id) as encounter_id FROM etl.flat_labs_and_imaging fli where fli.hiv_viral_load is not null GROUP BY person_id) max_dates ON fli.person_id = max_dates.person_id AND fli.test_datetime = max_dates.max_vl_1_date AND fli.encounter_id = max_dates.encounter_id)",
      "alias": "fli",
      "join": {
        "type": "LEFT",
        "joinCondition": "fli.person_id = t1.person_id"
      }
    },
    {
      "table": "etl.flat_labs_and_imaging",
      "alias": "s",
      "join": {
        "type": "left",
        "joinCondition": "s.person_id = t1.person_id AND s.antibody_screen IS NOT NULL"
      }
    },
    {
      "table": "etl.flat_labs_and_imaging",
      "alias": "t2",
      "join": {
        "type": "left",
        "joinCondition": "date(t1.encounter_datetime) = date(t2.test_datetime) and t1.person_id = t2.person_id"
      }
    },
    {
      "table": "etl.flat_hiv_summary_v15b",
      "alias": "ls",
      "join": {
        "type": "left",
        "joinCondition": "(t1.person_id = ls.person_id AND ls.next_encounter_datetime_hiv is NULL)"
      }
    },
    {
      "table": "amrs.person",
      "alias": "t5",
      "join": {
        "type": "left",
        "joinCondition": "t5.person_id = t1.person_id"
      }
    },
    {
      "table": "amrs.patient_program",
      "alias": "p",
      "join": {
        "type": "left",
        "joinCondition": "t1.person_id = p.patient_id AND p.program_id = 9 AND date_completed IS NULL"
      }
    },
    {
      "dataSet": "flatLabsAndImagingDataSetbase",
      "alias": "t3",
      "join": {
        "type": "left",
        "joinCondition": "t3.person_uuid = t1.uuid"
      }
    },
    {
      "table": "predictions.ml_weekly_predictions",
      "alias": "mwl",
      "join": {
        "type": "left",
        "joinCondition": "mwl.person_id = t1.person_id"
      }
    },
    {
      "table": "amrs.relationship",
      "alias": "t6",
      "join": {
        "type": "left",
        "joinCondition": "t6.person_a = t1.person_id"
      }
    },
    {
      "table": "amrs.patient_program",
      "alias": "t9",
      "join": {
        "type": "left",
        "joinCondition": "t1.person_id = t9.patient_id AND t9.program_id = 29 AND t9.date_completed IS NULL"
      }
    },
    {
      "table": "amrs.patient_program",
      "alias": "t10",
      "join": {
        "type": "left",
        "joinCondition": "t1.person_id = t10.patient_id AND t10.program_id = 4 AND t10.date_completed IS NULL"
      }
    },
    {
      "table": "amrs.patient_program",
      "alias": "t7",
      "join": {
        "type": "left",
        "joinCondition": "t1.person_id = t7.patient_id AND t7.program_id = 27 AND t7.date_completed IS NULL"
      }
    },
    {
      "table": "etl.flat_hiv_summary_ext",
      "alias": "t11",
      "join": {
        "type": "left",
        "joinCondition": "t11.encounter_id = t1.encounter_id "
      }
    }
  ],
  "columns": [
    {
      "type": "derived_column",
      "alias": "needs_vl_coded",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "CASE WHEN (ls.cur_arv_meds IS NULL) THEN 0 WHEN (TIMESTAMPDIFF(MONTH, ls.vl_1_date, DATE('{referenceDate}')) > 3) AND ls.vl_1 > 1000 AND ls.arv_start_date < ls.vl_1_date THEN 1 WHEN ls.vl_1 > 200 AND (TIMESTAMPDIFF(MONTH,ls.vl_1_date,DATE('{referenceDate}')) > 3) THEN 2 WHEN (TIMESTAMPDIFF(MONTH, ls.arv_start_date, '{referenceDate}') >= 12) AND (ls.vl_2 IS NULL) THEN 3 WHEN (ls.is_pregnant OR (t6.relationship = 2 AND TIMESTAMPDIFF(MONTH, t6.date_created, '{referenceDate}') BETWEEN 0 AND 24)) AND (TIMESTAMPDIFF(MONTH, ls.vl_1_date, '{referenceDate}') >= 6) THEN 4 WHEN (t1.is_pregnant OR (t6.relationship = 2 AND TIMESTAMPDIFF(MONTH, t6.date_created, '{referenceDate}') BETWEEN 0 AND 24)) AND ls.vl_1 >= 200 AND (TIMESTAMPDIFF(MONTH, ls.vl_1_date, '{referenceDate}') >= 3) THEN 5 WHEN (TIMESTAMPDIFF(MONTH, ls.arv_start_date, '{referenceDate}') = 3) AND (ls.vl_1_date IS NULL) THEN 6 WHEN (ls.cur_arv_meds <> ls.prev_arv_meds) AND ls.prev_arv_meds IS NOT NULL THEN 7 WHEN ls.vl_1 < 200  AND (TIMESTAMPDIFF(MONTH, ls.vl_1_date, DATE('{referenceDate}')) >= 12) THEN 8 ELSE 0 END"
      }
    },
    {
      "type": "derived_column",
      "alias": "overdue_vl_lab_order",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when (timestampdiff(day,ls.vl_order_date, '{referenceDate}') >= 14) and (ls.vl_1_date is null or ls.vl_order_date > ls.vl_1_date) and t2.vl_error <> 1 then timestampdiff(day,ls.vl_order_date, '{referenceDate}') else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "new_viral_load_present",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "DATE_ADD(ls.vl_1_date, INTERVAL 90 DAY) > NOW()"
      }
    },
    {
      "type": "derived_column",
      "alias": "needs_cd4_count_coded",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when ls.cur_arv_meds is not null and ls.vl_1 > 1000 and timestampdiff(day,ls.cd4_1_date, '{referenceDate}') >= 90 then 1 when timestampdiff(month,ls.arv_start_date, '{referenceDate}') <= 12 and (ls.cd4_1_date is null or timestampdiff(month,ls.cd4_1_date, '{referenceDate}') > 6) then 2 when timestampdiff(month,ls.arv_start_date, '{referenceDate}') > 12 and (ls.cd4_1_date is null or timestampdiff(month,ls.cd4_1_date, '{referenceDate}') > 12) then 3 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "months_since_cd4_count",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "TIMESTAMPDIFF(MONTH, ls.cd4_1_date,'{referenceDate}')"
      }
    },
    {
      "type": "simple_column",
      "alias": "previous_cd4_count",
      "column": "ls.cd4_2"
    },
    {
      "type": "simple_column",
      "alias": "latest_cd4_count",
      "column": "ls.cd4_1"
    },
    {
      "type": "derived_column",
      "alias": "get_cd4_count_coded",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "CASE WHEN ls.arv_start_date >= '2023-04-01' AND ls.cd4_1 IS NULL THEN 1 WHEN (ls.vl_1 > 1000) THEN 2 WHEN (TIMESTAMPDIFF(MONTH, ls.rtc_date, '{referenceDate}') >= 3) THEN 3 WHEN ( t11.on_cm_treatment = 1 AND t11.cm_treatment_end_date IS NULL) AND (TIMESTAMPDIFF(MONTH, ls.cd4_1_date, '{referenceDate}') >= 6) THEN 4 ELSE 0 END"
      }
    },
    {
      "type": "derived_column",
      "alias": "months_since_last_vl_date",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "timestampdiff(month,ls.vl_1_date, '{referenceDate}')"
      }
    },
    {
      "type": "derived_column",
      "alias": "overdue_cd4_count_lab_order",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when timestampdiff(day,ls.cd4_order_date, '{referenceDate}') > 30 and ls.cd4_1_date is null or ls.cd4_order_date > ls.cd4_1_date then timestampdiff(day,ls.cd4_order_date, '{referenceDate}') else 0 end "
      }
    },
    {
      "type": "derived_column",
      "alias": "next_rtc_duration",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "TIMESTAMPDIFF(MONTH, ls.rtc_date, '{referenceDate}')"
      }
    },
    {
      "type": "derived_column",
      "alias": "is_on_inh_treatment",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "ls.ipt_start_date is not null "
      }
    },
    {
      "type": "derived_column",
      "alias": "qualifies_differenciated_care",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t1.vl_1 < 200 and (timestampdiff(year,birthdate, date('{referenceDate}')) >= 20) and ((timestampdiff(month,t1.ipt_start_date,if(t1.ipt_completion_date is not null and (t1.tb_prophylaxis_duration = 6 or t1.tb_prophylaxis_duration is null),t1.ipt_completion_date,'{referenceDate}')) >= 6) or (timestampdiff(month,t1.ipt_start_date,if(t1.ipt_completion_date is not null and t1.tb_prophylaxis_duration = 3,t1.ipt_completion_date,'{referenceDate}')) >= 3)) and (timestampdiff(month,t1.vl_1_date,now()) <= 11 ) and (timestampdiff(month,t1.arv_start_date, '{referenceDate}') >= 12) AND p.program_id IS NULL and t10.program_id is null and DATE(t1.prev_rtc_date) = DATE(t1.encounter_datetime) then 1 else 0 end"
      }
    },
    {
      "type": "simple_column",
      "alias": "last_encounter_date",
      "column": "ls.encounter_datetime"
    },
    {
      "type": "simple_column",
      "alias": "latest_CD4_Date",
      "column": "ls.cd4_1_date"
    },
    {
      "type": "simple_column",
      "alias": "ipt_start_date",
      "column": "ls.ipt_start_date"
    },
    {
      "type": "simple_column",
      "alias": "ipt_stop_date",
      "column": "ls.ipt_stop_date"
    },
    {
      "type": "simple_column",
      "alias": "on_ipt",
      "column": "ls.on_ipt"
    },
    {
      "type": "simple_column",
      "alias": "ipt_completion_date",
      "column": "ls.ipt_completion_date"
    },
    {
      "type": "simple_column",
      "alias": "tb_tx_start_date",
      "column": "ls.tb_tx_start_date"
    },
    {
      "type": "simple_column",
      "alias": "tb_tx_end_date",
      "column": "ls.tb_tx_end_date"
    },
    {
      "type": "simple_column",
      "alias": "on_tb_tx",
      "column": "ls.on_tb_tx"
    },
    {
      "type": "simple_column",
      "alias": "birth_date",
      "column": "t5.birthdate"
    },
    {
      "type": "simple_column",
      "alias": "gender",
      "column": "t5.gender"
    },
    {
      "type": "simple_column",
      "alias": "person_id",
      "column": "t1.person_id"
    },
    {
      "type": "simple_column",
      "alias": "person_uuid",
      "column": "t1.uuid"
    },
    {
      "type": "simple_column",
      "alias": "arv_start_date",
      "column": "t1.arv_start_date"
    },

    {
      "type": "simple_column",
      "alias": "cur_arv_meds",
      "column": "t1.cur_arv_meds"
    },
    {
      "type": "simple_column",
      "alias": "viral_load",
      "column": "fli.vl_1"
    },
    {
      "type": "simple_column",
      "alias": "vl_order_date",
      "column": "t1.vl_order_date"
    },
    {
      "type": "simple_column",
      "alias": "last_vl_date",
      "column": "fli.vl_1_date"
    },
    {
      "type": "simple_column",
      "alias": "vl_error",
      "column": "t2.vl_error"
    },
    {
      "type": "simple_column",
      "alias": "vl_error_date",
      "column": "t2.test_datetime"
    },
    {
      "type": "simple_column",
      "alias": "predicted_risk",
      "column": "mwl.predicted_risk"
    },
    {
      "type": "simple_column",
      "alias": "predicted_prob_disengage",
      "column": "mwl.predicted_prob_disengage"
    },
    {
      "type": "simple_column",
      "alias": "prediction_generated_date",
      "column": "mwl.prediction_generated_date"
    },
    {
      "type": "simple_column",
      "alias": "test_date",
      "column": "DATE_FORMAT(t2.test_datetime,'%Y-%m-%d')"
    },
    {
      "type": "simple_column",
      "alias": "ordered_vl_has_error",
      "column": "t3.ordered_vl_has_error"
    },
    {
      "type": "simple_column",
      "alias": "vl_error_order_date",
      "column": "t3.vl_error_order_date"
    },
    {
      "type": "derived_column",
      "alias": "ipt_completion_date",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t1.tb_prophylaxis_duration = 3 then DATE_ADD(t1.ipt_start_date, INTERVAL 90 DAY) else DATE_ADD(t1.ipt_start_date, INTERVAL 180 DAY) end"
      }
    },
    {
      "type": "simple_column",
      "alias": "ipt_start_date",
      "column": "t1.ipt_start_date"
    },
    {
      "type": "derived_column",
      "alias": "inh_treatment_days_remaining",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t1.tb_prophylaxis_duration = 3 then DATEDIFF(DATE_ADD(t1.ipt_start_date, INTERVAL 90 DAY), now()) else DATEDIFF(DATE_ADD(t1.ipt_start_date, INTERVAL 180 DAY), now()) end"
      }
    },
    {
      "type": "derived_column",
      "alias": "is_pregnant",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t1.is_pregnant = 1 then 1 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "is_postnatal",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t6.relationship = 2 and timestampdiff(month,t6.date_created, '{referenceDate}') between 0 and 24 then 1 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "is_infant",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when timestampdiff(month,t5.birthdate, '{referenceDate}') between 0 and 24 then 1 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "dna_pcr_reminder",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t9.program_id is not null AND s.antibody_screen is NULL and timestampdiff(month,t5.birthdate, '{referenceDate}') between 0 and 2 then 1 when t9.program_id is not null AND s.antibody_screen is NULL and timestampdiff(month,t5.birthdate, '{referenceDate}') = 6 then 2 when t9.program_id is not null AND s.antibody_screen is NULL and timestampdiff(month,t5.birthdate, '{referenceDate}') = 12 then 3 when t9.program_id is not null AND s.antibody_screen is NULL and timestampdiff(month,t5.birthdate, '{referenceDate}') between 18 and 24 then 4 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "qualifies_enhanced",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t1.vl_1 >= 200 and (t7.program_id is null) then 1 when (t1.vl_1 < 200) and (t7.program_id is not null) then 2 when (t7.program_id is not null and t7.date_completed is null) and timestampdiff(month,t1.vl_1_date, '{referenceDate}') >= 3 then 3 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "has_gene_xpert_result",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t3.gene_expert_image is not null then 1 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "has_dst_result",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t3.dst_image is not null then 1 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "needs_ipt_completion",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when ((t1.tb_prophylaxis_duration = 3 and TIMESTAMPDIFF(DAY,t1.ipt_start_date,CURDATE()) > 90) or (TIMESTAMPDIFF(DAY,t1.ipt_start_date,CURDATE()) > 180)) and t1.ipt_completion_date is null and t1.ipt_stop_date is null then 1 else 0 end"
      }
    },
    {
      "type": "simple_column",
      "alias": "tb_prophylaxis_duration",
      "column": "t1.tb_prophylaxis_duration"
    },
    {
      "type": "simple_column",
      "alias": "transfer_out_date",
      "column": "t1.transfer_out_date"
    },
    {
      "type": "simple_column",
      "alias": "death_status",
      "column": "t5.dead"
    },
    {
      "type": "derived_column",
      "alias": "hide_patient_reminder",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t1.patient_care_status in (10502,1287,9068,1593,159,5622,9083) then 1 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "due_for_contraception_refill",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when (t1.contraceptive_method in (9510,9511,9734,9735) AND t1.continue_on_fp = 1 and t1.on_modern_contraceptive is null and date(t1.encounter_datetime) not between t1.modern_contraceptive_reporting_date and date_add(t1.modern_contraceptive_reporting_date, interval 6 month)) OR (t1.contraceptive_method in (8300,5279) and t1.on_modern_contraceptive is null and date(t1.encounter_datetime) not between t1.modern_contraceptive_reporting_date and date_add(t1.modern_contraceptive_reporting_date, interval 3 month))  then 1 else 0 end"
      }
    },
    {
      "type": "derived_column",
      "alias": "not_on_modern_contraception",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when extract(year from (from_days(datediff(now(),t5.birthdate)))) between 10 and 49 and t5.gender = 'F' and t1.is_pregnant is null and t1.with_pregnancy_intentions is null and (t1.contraceptive_method IS NULL OR t1.contraceptive_method NOT IN (190 , 780, 907, 6218, 6217, 5841, 6717, 6718, 6725, 8134, 5274, 8300, 5279 , 5278, 5275, 5276, 6220, 6700, 6701, 9510, 9511, 9734, 9735, 10817)) then 1 else 0 end"
      }
    },
    {
      "type": "simple_column",
      "alias": "modern_contraceptive_reporting_date",
      "column": "t1.modern_contraceptive_reporting_date"
    },
    {
      "type": "simple_column",
      "alias": "contraceptive_method",
      "column": "t1.contraceptive_method"
    },
    {
      "type": "simple_column",
      "alias": "modern_contraceptive_method_start_date",
      "column": "date_format(t1.modern_contraceptive_method_start_date,'%d-%m-%Y')"
    },
    {
      "type": "simple_column",
      "alias": "contraceptive_method",
      "column": "t1.contraceptive_method"
    },
    {
      "type": "derived_column",
      "alias": "contraception_method_name",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when t1.contraceptive_method = 9510 then '3-year implant' when t1.contraceptive_method = 9511 then '5-year implant' else null  end"
      }
    },
    {
      "type": "derived_column",
      "alias": "has_contraception_expired",
      "expressionType": "simple_expression",
      "expressionOptions": {
        "expression": "case when ((t1.contraceptive_method = 9510 AND TIMESTAMPDIFF(MONTH, t1.modern_contraceptive_method_start_date, t1.encounter_datetime) > 36) OR (t1.contraceptive_method = 9511 AND TIMESTAMPDIFF(MONTH, t1.modern_contraceptive_method_start_date, t1.encounter_datetime) > 60) OR (t1.contraceptive_method in (9734,9735) AND TIMESTAMPDIFF(MONTH, t1.modern_contraceptive_method_start_date, t1.encounter_datetime) > 120)) then 1 else 0 end"
      }
    }
  ],
  "indexDirectives": [
    {
      "type": "force",
      "indexList": ["person_uuid"]
    }
  ],
  "filters": {
    "conditionJoinOperator": "and",
    "conditions": [
      {
        "filterType": "tableColumns",
        "conditionExpression": "t1.uuid = ? and t1.is_clinical_encounter = 1",
        "parameterName": "patientUuid"
      },
      {
        "filterType": "tableColumns",
        "conditionExpression": "t1.encounter_datetime < ?",
        "parameterName": "referenceDate"
      }
    ]
  },
  "orderBy": {
    "orderByParam": "orderByParam",
    "columns": [
      {
        "column": "t1.encounter_datetime",
        "order": "desc"
      },
      {
        "column": "mwl.prediction_generated_date",
        "order": "desc"
      }
    ]
  },
  "paging": {
    "offSetParam": "offSetParam",
    "limitParam": "limitParam"
  }
}
